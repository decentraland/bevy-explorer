on: [push, pull_request]

name: Continuous integration

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v2
      - name: Install protoc
        uses: arduino/setup-protoc@master
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install alsa and udev
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev
      - name: install ffmpeg deps
        run: sudo apt install -y --no-install-recommends clang curl pkg-config libavcodec-dev libavformat-dev libavutil-dev libavfilter-dev libavdevice-dev
      - name: install livekit deps
        run: sudo apt update -y; sudo apt install -y libssl-dev libx11-dev libgl1-mesa-dev libxext-dev
      - uses: actions/checkout@v2
      - uses: actions-rs/cargo@v1
        with:
          command: check

  hardcore-test:
    name: Test Scenes
    runs-on: ubuntu-22.04
    steps:
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v2
      - name: Install protoc
        uses: arduino/setup-protoc@master
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install alsa, udev and xkb
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev libxkbcommon-x11-0
      - name: install xvfb, llvmpipe and lavapipe
        run: |
          sudo apt-get update -y -qq
          sudo add-apt-repository ppa:kisak/kisak-mesa -y
          sudo apt-get update
          sudo apt install -y xvfb libegl1-mesa libgl1-mesa-dri libxcb-xfixes0-dev mesa-vulkan-drivers
      - name: install ffmpeg deps
        run: sudo apt install -y --no-install-recommends clang curl pkg-config libavcodec-dev libavformat-dev libavutil-dev libavfilter-dev libavdevice-dev
      - name: install livekit deps
        run: sudo apt update -y; sudo apt install -y libssl-dev libx11-dev libgl1-mesa-dev libxext-dev
      - uses: actions/checkout@v2
      - name: Test Scenes
        continue-on-error: true
        run: |
          xvfb-run -s "-screen 0 320x240x24" cargo run --release -- --server https://decentraland.github.io/scene-explorer-tests/scene-explorer-tests --test_scenes "52,-52;52,-54;52,-56;52,-58;52,-60;52,-62;52,-64;52,-66;52,-68;54,-52;54,-54;54,-56;54,-58;54,-60" --no_fog --distance 1 --scene_log_to_console

  test:
    name: Test Suite
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-15]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
#      - uses: Swatinem/rust-cache@v2
      - name: Install protoc
        if: matrix.os != 'self-hosted-windows'
        uses: arduino/setup-protoc@master
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install alsa and udev
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev
        if: runner.os == 'linux'
      - name: install ffmpeg deps (linux)
        run: sudo apt install -y --no-install-recommends clang curl pkg-config libavcodec-dev libavformat-dev libavutil-dev libavfilter-dev libavdevice-dev
        if: runner.os == 'linux'
      - name: install livekit deps (linux)
        run: sudo apt update -y; sudo apt install -y libssl-dev libx11-dev libgl1-mesa-dev libxext-dev
        if: runner.os == 'linux'
      - name: install ffmpeg deps (macOs)
        if: runner.os == 'macos'
        run: |
          brew install ffmpeg@6 pkg-config;
          echo "PKG_CONFIG_PATH=/opt/homebrew/opt/ffmpeg@6/lib/pkgconfig" >> "$GITHUB_ENV"
      - name: install ffmpeg deps (windows)
        if: runner.os == 'windows' && matrix.os != 'self-hosted-windows'
        run: |
          $VCINSTALLDIR = $(& "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath)
          Add-Content $env:GITHUB_ENV "LIBCLANG_PATH=${VCINSTALLDIR}\VC\Tools\LLVM\x64\bin`n"
          Invoke-WebRequest "https://github.com/GyanD/codexffmpeg/releases/download/6.0/ffmpeg-6.0-full_build-shared.7z" -OutFile ffmpeg-6.0-full_build-shared.7z
          7z x ffmpeg-6.0-full_build-shared.7z
          mkdir ffmpeg
          mv ffmpeg-*/* ffmpeg/
          Add-Content $env:GITHUB_ENV "FFMPEG_DIR=${pwd}\ffmpeg`n"
          Add-Content $env:GITHUB_PATH "${pwd}\ffmpeg\bin`n"          
      - uses: actions-rs/cargo@v1
        if: runner.os == 'windows'
        with:
          command: test
          args: --all --release -j8
      - uses: actions-rs/cargo@v1
        if: runner.os == 'linux'
        with:
          command: test
          args: --all --release
      - uses: actions-rs/cargo@v1
        if: runner.os == 'macos'
        with:
          command: test
          args: --all --release
      
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: Swatinem/rust-cache@v2
      - name: Install protoc
        uses: arduino/setup-protoc@master
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install alsa and udev
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev
      - name: install ffmpeg deps (linux)
        run: sudo apt install -y --no-install-recommends clang curl pkg-config libavcodec-dev libavformat-dev libavutil-dev libavfilter-dev libavdevice-dev
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - uses: Swatinem/rust-cache@v2
      - name: Install protoc
        uses: arduino/setup-protoc@master
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install alsa and udev
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev
      - name: install ffmpeg deps (linux)
        run: sudo apt install -y --no-install-recommends clang curl pkg-config libavcodec-dev libavformat-dev libavutil-dev libavfilter-dev libavdevice-dev
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  build-deploy-web:
    name: Build and Deploy Web
    # needs: [check, test, fmt, clippy]
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2025-06-03
          target: wasm32-unknown-unknown
          components: rust-src
          override: true
      - name: Install protoc
        uses: arduino/setup-protoc@master
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install wasm-pack
        run: cargo install wasm-pack
      - name: Install alsa and udev
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev
      - name: install deps (linux)
        run: sudo apt install -y --no-install-recommends clang curl
      - name: Build WASM package
        run: |
          cp -r ./assets ./deploy/web/assets/
          wasm-pack build --target web --out-dir ./deploy/web/pkg --no-default-features --features="wasm livekit"
      
      - name: Deploy [OLD]
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_WEB_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_WEB_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: auto
          COMMIT_HASH: ${{ github.sha }}
        run: |
          aws s3 cp ./deploy/web/ s3://bevy-web/$COMMIT_HASH/ --recursive \
            --endpoint-url ${{ secrets.S3_WEB_ENDPOINT }} \
            --checksum-algorithm=CRC32

      - name: Publish
        uses: decentraland/oddish-action@master
        with:
          cwd: './deploy/web'
          deterministic-snapshot: true
          registry-url: 'https://registry.npmjs.org'
          access: public
          gitlab-token: ${{ secrets.GITLAB_CDN_DEPLOYER_TOKEN }}
          gitlab-pipeline-url: ${{ secrets.GITLAB_CDN_DEPLOYER_URL }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}