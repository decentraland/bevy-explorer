// Import the wasm-bindgen generated JS glue code and Rust functions
import init, {
    wasm_run,
} from './pkg/webgpu_build.js'; // Ensure this path is correct

// Get references to the new input elements
const initialRealmInput = document.getElementById('initialRealm');
const locationInput = document.getElementById('location');
const initButton = document.getElementById('initButton');
const canvas = document.getElementById('mygame-canvas'); // Get canvas reference

// Get references to the input group containers to hide them
// Ensure these elements are present before trying to access parentElement
let initialRealmGroup = null;
if (initialRealmInput) {
    initialRealmGroup = initialRealmInput.parentElement; // Assumes input is direct child of its group
} else {
    console.warn("[Main JS] 'initialRealm' input field not found when trying to get its parent group.");
}

let locationGroup = null;
if (locationInput) {
    locationGroup = locationInput.parentElement; // Assumes input is direct child of its group
} else {
    console.warn("[Main JS] 'location' input field not found when trying to get its parent group.");
}


/**
 * Parses URL query parameters and sets them as default values for input fields.
 * If query parameters are not present, it uses predefined default values.
 */
function populateInputsFromQueryParams() {
    const queryParams = new URLSearchParams(window.location.search);

    const initialRealmParam = queryParams.get('initialRealm');
    if (initialRealmInput && initialRealmParam) { // Check if input exists and param is present
        initialRealmInput.value = decodeURIComponent(initialRealmParam);
        console.log(`[Main JS] Initial Realm from query: ${initialRealmInput.value}`);
    } else if (initialRealmInput) { // Check if input exists, but param is not present
        initialRealmInput.value = "https://realm-provider-ea.decentraland.org/main"; // Default value
        console.log(`[Main JS] No 'initialRealm' query parameter found. Using default: ${initialRealmInput.value}`);
    }

    const locationParam = queryParams.get('location');
    if (locationInput && locationParam) { // Check if input exists and param is present
        locationInput.value = decodeURIComponent(locationParam);
        console.log(`[Main JS] Location from query: ${locationInput.value}`);
    } else if (locationInput) { // Check if input exists, but param is not present
        locationInput.value = "0,0"; // Default value
        console.log(`[Main JS] No 'location' query parameter found. Using default: ${locationInput.value}`);
    }
}

/**
 * Hides the settings input groups.
 */
function hideSettings() {
    if (initialRealmGroup) {
        initialRealmGroup.style.display = 'none';
    } else {
        console.warn("[Main JS] Could not find the 'initialRealm' input group to hide it (it may have not been found initially).");
    }
    if (locationGroup) {
        locationGroup.style.display = 'none';
    } else {
        console.warn("[Main JS] Could not find the 'location' input group to hide it (it may have not been found initially).");
    }
    // Also hide the button itself after it's clicked
    if (initButton) {
        initButton.style.display = 'none';
    }
}

/**
 * Main function to initialize and run the WebAssembly module.
 */
async function run() {
    // Populate input fields from URL query parameters on load or use defaults
    populateInputsFromQueryParams();

    // Disable the button initially and style it as disabled
    if (initButton) {
        initButton.disabled = true;
        initButton.style.opacity = '0.5';
        initButton.style.cursor = 'not-allowed';
        initButton.textContent = 'Loading...'; // Optional: change text while loading
    }

    // Path to the _bg.wasm file generated by wasm-pack
    // Ensure this path is correct relative to your HTML file or server setup.
    const wasmUrl = './pkg/webgpu_build_bg.wasm'; 
    
    console.log(`[Main JS] Attempting to fetch Wasm from: ${wasmUrl}`);

    try {
        const response = await fetch(wasmUrl);
        if (!response.ok) {
            throw new Error(`[Main JS] Failed to fetch Wasm: ${response.status} ${response.statusText}. URL: ${response.url}`);
        }
        const wasmBytes = await response.arrayBuffer();
        console.log("[Main JS] Wasm fetched successfully.");

        await init(wasmBytes);
        console.log("[Main JS] WebAssembly module initialized.");

        // Enable the button and restore its style now that Wasm is loaded
        if (initButton) {
            initButton.disabled = false;
            initButton.style.opacity = '1';
            initButton.style.cursor = 'pointer';
            initButton.textContent = 'Go'; // Restore original text
            console.log("[Main JS] 'Go' button enabled.");
        }


        // Ensure the button and inputs are present
        if (!initButton) {
            console.error("[Main JS] 'initButton' not found in the DOM.");
            return;
        }
        // No need to check initialRealmInput and locationInput again here if populateInputsFromQueryParams already did
        if (!canvas) {
            console.error("[Main JS] 'mygame-canvas' not found in the DOM.");
            // Potentially hide or disable the button if canvas is critical
        }


        initButton.onclick = () => {
            // Get the current values from the input fields
            // Ensure inputs exist before trying to get their value
            const initialRealm = initialRealmInput ? initialRealmInput.value : "https://realm-provider-ea.decentraland.org/main"; // Fallback if input somehow missing
            const location = locationInput ? locationInput.value : "0,0"; // Fallback if input somehow missing

            console.log(`[Main JS] "Go" button clicked. Initial Realm: "${initialRealm}", Location: "${location}"`);
            
            // Hide the settings
            hideSettings();

            // Check if canvas is available before running wasm_run, if it's used by it
            if (!canvas) {
                 console.error("[Main JS] Cannot run wasm_run: Canvas element is missing.");
                 // Optionally, display a user-friendly message on the page
                 return;
            }

            try {
                // Pass the values to the wasm_run function
                // IMPORTANT: Ensure your Rust `wasm_run` function is defined to accept these two string arguments.
                // For example: pub fn wasm_run(initial_realm: String, location: String) { ... }
                wasm_run(initialRealm, location); 
                console.log("[Main JS] wasm_run() called. Check console for further logs from Wasm.");
            } catch (e) {
                console.error("[Main JS] Error calling wasm_run:", e);
                // Display a user-friendly error message on the page if desired
            }
        };
        console.log("[Main JS] 'Go' button event listener attached.");

    } catch (error) {
        console.error("[Main JS] Error during Wasm initialization or setup:", error);
        // If Wasm fails to load, keep the button disabled or provide feedback
        if (initButton) {
            initButton.textContent = 'Load Failed';
            // initButton.disabled will remain true
            console.log("[Main JS] 'Go' button remains disabled due to Wasm load error.");
        }

        // Display a user-friendly error message on the page
        const errorDisplay = document.createElement('p');
        errorDisplay.style.color = 'red';
        errorDisplay.textContent = `Error loading WebAssembly: ${error.message}. Please check the console for more details.`;
        // Ensure body exists before trying to insert
        if (document.body) {
            document.body.insertBefore(errorDisplay, document.body.firstChild);
        } else {
            // Fallback if body isn't loaded yet
            window.addEventListener('DOMContentLoaded', () => {
                if (document.body) { // Check again inside listener
                    document.body.insertBefore(errorDisplay, document.body.firstChild);
                }
            });
        }
    }
}

// Run the main function
run().catch(error => {
    console.error("[Main JS] Top-level error during script execution:", error);
    const topErrorDisplay = document.createElement('p');
    topErrorDisplay.style.color = 'red';
    topErrorDisplay.style.fontWeight = 'bold';
    topErrorDisplay.textContent = `A critical error occurred: ${error.message}. Check console.`;
    if (document.body) {
         document.body.insertBefore(topErrorDisplay, document.body.firstChild);
    } else {
        window.addEventListener('DOMContentLoaded', () => {
            if (document.body) { // Check again inside listener
                 document.body.insertBefore(topErrorDisplay, document.body.firstChild);
            }
        });
    }
});
