syntax = "proto3";
package decentraland.common;
import "decentraland/common/vectors.proto";

enum TextureWrapMode {
  TWM_REPEAT = 0;
  TWM_CLAMP = 1;
  TWM_MIRROR = 2;
}

enum TextureFilterMode {
  TFM_POINT = 0;
  TFM_BILINEAR = 1;
  TFM_TRILINEAR = 2;
}

message Texture {
  string src = 1;
  optional TextureWrapMode wrap_mode = 2; // default = TextureWrapMode.Clamp
  optional TextureFilterMode filter_mode = 3; // default = FilterMode.Bilinear

  // Final uv = offset + (input_uv * tiling)
  optional Vector2 offset = 4; // default = Vector2.Zero; Offset for texture positioning, only works for the texture property in PbrMaterial or UnlitMaterial.
  optional Vector2 tiling = 5; // default = Vector2.One; Tiling multiplier for texture repetition, only works for the texture property in PbrMaterial or UnlitMaterial.
}

message AvatarTexture {
  string user_id = 1;
  optional TextureWrapMode wrap_mode = 2; // default = TextureWrapMode.Clamp
  optional TextureFilterMode filter_mode = 3; // default = FilterMode.Bilinear
}

message VideoTexture {
  uint32 video_player_entity = 1;
  optional TextureWrapMode wrap_mode = 2; // default = TextureWrapMode.Clamp
  optional TextureFilterMode filter_mode = 3; // default = FilterMode.Bilinear
}

message UiCanvasTexture {
  uint32 ui_canvas_entity = 1;
  optional TextureWrapMode wrap_mode = 2; // default = TextureWrapMode.Clamp
  optional TextureFilterMode filter_mode = 3; // default = FilterMode.Bilinear
}

message TextureUnion {
  oneof tex {
    Texture texture = 1; // default = null
    AvatarTexture avatar_texture = 2; // default = null
    VideoTexture video_texture = 3; // default = null
    UiCanvasTexture ui_texture = 4;
  }
}
